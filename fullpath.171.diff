--- extras/path_id/path_id.c
+++ extras/path_id/path_id.c
@@ -106,6 +106,26 @@ static struct udev_device *skip_subsyste
 	return dev;
 }
 
+/* Check that the subsystem and devtype are equal. Null devtype is allowed,
+if the device has a matching null devtype. */
+static int subsys_type_is(struct udev_device* dev, char const* refsubsys,
+char const* reftype)
+{
+	char const* test;
+	
+	test = udev_device_get_subsystem(dev);
+	if (NULL == test || 0 != strcmp(test, refsubsys)) {
+		return 0;
+	}
+	
+	test = udev_device_get_devtype(dev);
+	if (NULL == reftype) {
+		return NULL == test;
+	} else {
+		return NULL != test && 0 == strcmp(test, reftype);
+	}
+}
+
 static struct udev_device *handle_scsi_fibre_channel(struct udev_device *parent, char **path)
 {
 	struct udev *udev  = udev_device_get_udev(parent);
@@ -232,39 +252,26 @@ out:
 	return parent;
 }
 
-static struct udev_device *handle_scsi_default(struct udev_device *parent, char **path)
+static int get_base(struct udev_device* dev, char const* name,
+size_t namelen, int* baseret)
 {
-	struct udev_device *hostdev;
-	int host, bus, target, lun;
-	const char *name;
 	char *base;
 	char *pos;
 	DIR *dir;
 	struct dirent *dent;
 	int basenum;
 
-	hostdev = udev_device_get_parent_with_subsystem_devtype(parent, "scsi", "scsi_host");
-	if (hostdev == NULL)
-		return NULL;
-
-	name = udev_device_get_sysname(parent);
-	if (sscanf(name, "%d:%d:%d:%d", &host, &bus, &target, &lun) != 4)
-		return NULL;
-
-	/* rebase host offset to get the local relative number */
 	basenum = -1;
-	base = strdup(udev_device_get_syspath(hostdev));
+	base = strdup(udev_device_get_syspath(dev));
 	if (base == NULL)
-		return NULL;
+		return 0;
 	pos = strrchr(base, '/');
 	if (pos == NULL) {
-		parent = NULL;
 		goto out;
 	}
 	pos[0] = '\0';
 	dir = opendir(base);
 	if (dir == NULL) {
-		parent = NULL;
 		goto out;
 	}
 	for (dent = readdir(dir); dent != NULL; dent = readdir(dir)) {
@@ -275,9 +282,9 @@ static struct udev_device *handle_scsi_d
 			continue;
 		if (dent->d_type != DT_DIR && dent->d_type != DT_LNK)
 			continue;
-		if (strncmp(dent->d_name, "host", 4) != 0)
+		if (strncmp(dent->d_name, name, namelen) != 0)
 			continue;
-		i = strtoul(&dent->d_name[4], &rest, 10);
+		i = strtoul(&dent->d_name[namelen], &rest, 10);
 		if (rest[0] != '\0')
 			continue;
 		if (basenum == -1 || i < basenum)
@@ -285,56 +292,121 @@ static struct udev_device *handle_scsi_d
 	}
 	closedir(dir);
 	if (basenum == -1) {
-		parent = NULL;
 		goto out;
 	}
-	host -= basenum;
+	*baseret = basenum;
+	free(base);
+	return 1;
 
-	path_prepend(path, "scsi-%u:%u:%u:%u", host, bus, target, lun);
 out:
 	free(base);
-	return hostdev;
+	return 0;
 }
 
-static struct udev_device *handle_scsi(struct udev_device *parent, char **path)
+/* Maps:
+	hostN/targetN:B:T/N:B:T:L => scsi-O:B:T:L
+	hostN/targetN:B:T => scsi-O:B:T
+	hostN => scsi-O
+*/
+static int handle_scsi_default(struct udev_device **parent, char **path)
 {
-	const char *devtype;
+	struct udev_device *hostdev = *parent;
+	int host, bus, target, lun;
 	const char *name;
-	const char *id;
-
-	devtype = udev_device_get_devtype(parent);
-	if (devtype == NULL || strcmp(devtype, "scsi_device") != 0)
-		return parent;
-
-	/* firewire */
-	id = udev_device_get_sysattr_value(parent, "ieee1394_id");
-	if (id != NULL) {
-		parent = skip_subsystem(parent, "scsi");
-		path_prepend(path, "ieee1394-0x%s", id);
-		goto out;
+	int basenum;
+	
+	struct udev_device* scsi_device = NULL;
+	struct udev_device* scsi_target = NULL;
+	if (subsys_type_is(hostdev, "scsi", "scsi_device")) {
+		scsi_device = hostdev;
+		hostdev = udev_device_get_parent(hostdev);
+	}
+	if (subsys_type_is(hostdev, "scsi", "scsi_target")) {
+		scsi_target = hostdev;
+		hostdev = udev_device_get_parent(hostdev);
+	} else if (NULL != scsi_device) {
+		return 0;
+	}
+	if (!subsys_type_is(hostdev, "scsi", "scsi_host")) {
+		return 0;
+	}
+
+	name = udev_device_get_sysname(hostdev);
+	if (sscanf(name, "host%d", &host) != 1) {
+		return 0;
 	}
 
-	/* lousy scsi sysfs does not have a "subsystem" for the transport */
-	name = udev_device_get_syspath(parent);
-
-	if (strstr(name, "/rport-") != NULL) {
-		parent = handle_scsi_fibre_channel(parent, path);
-		goto out;
+	/* rebase host offset to get the local relative number */
+	if (!get_base(hostdev, "host", 4, &basenum)) {
+		return 0;
 	}
+	host -= basenum;
 
-	if (strstr(name, "/end_device-") != NULL) {
-		parent = handle_scsi_sas(parent, path);
-		goto out;
+	if (NULL == scsi_target) {
+		path_prepend(path, "scsi-%u", host);
+	} else {
+		name = udev_device_get_sysname(scsi_target);
+		int thost;
+		if (sscanf(name, "target%d:%d:%d", &thost, &bus, &target) !=
+		3 || thost != basenum + host) {
+			return 0;
+		}
+		
+		if (NULL == scsi_device) {
+			path_prepend(path, "scsi-%u:%u:%u", host, bus,
+				target);
+		} else {
+			name = udev_device_get_sysname(scsi_device);
+			int dhost, dbus, dtarget;
+			if (sscanf(name, "%d:%d:%d:%d", &dhost, &dbus,
+			&dtarget, &lun) != 4 || dhost != basenum + host ||
+			dbus != bus || dtarget != target) {
+				return 0;
+			}
+			
+			path_prepend(path, "scsi-%u:%u:%u:%u", host, bus,
+				target, lun);
+		}
 	}
+	
+	*parent = hostdev;
+	return 1;
+}
 
-	if (strstr(name, "/session") != NULL) {
-		parent = handle_scsi_iscsi(parent, path);
-		goto out;
+static int handle_scsi(struct udev_device **parent, char **path)
+{
+	const char *name;
+	const char *id;
+
+	if (subsys_type_is(*parent, "scsi", "scsi_device")) {
+		/* firewire */
+		id = udev_device_get_sysattr_value(*parent, "ieee1394_id");
+		if (id != NULL) {
+			path_prepend(path, "ieee1394-0x%s", id);
+			*parent = skip_subsystem(*parent, "scsi");
+			return 1;
+		}
+
+		/* lousy scsi sysfs does not have a "subsystem" for the transport */
+		name = udev_device_get_syspath(*parent);
+
+		if (strstr(name, "/rport-") != NULL) {
+			*parent = handle_scsi_fibre_channel(*parent, path);
+			return 1;
+		}
+
+		if (strstr(name, "/end_device-") != NULL) {
+			*parent = handle_scsi_sas(*parent, path);
+			return 1;
+		}
+
+		if (strstr(name, "/session") != NULL) {
+			*parent = handle_scsi_iscsi(*parent, path);
+			return 1;
+		}
 	}
 
-	parent = handle_scsi_default(parent, path);
-out:
-	return parent;
+	return handle_scsi_default(parent, path);
 }
 
 static void handle_scsi_tape(struct udev_device *dev, char **suffix)
@@ -348,27 +420,55 @@ static void handle_scsi_tape(struct udev
 		asprintf(suffix, "st%c", name[2]);
 }
 
-static struct udev_device *handle_usb(struct udev_device *parent, char **path)
+/* Maps:
+	usbN/N-P/N-P.Q/../N-P.Q..:1-I => usbO-P.Q..:1-I
+	usbN/N-P/N-P.Q/.. => usbO-P.Q..
+	usbN => usbO
+*/
+static int handle_usb(struct udev_device **parent, char **path)
 {
-	const char *devtype;
-	const char *str;
-	const char *port;
-
-	devtype = udev_device_get_devtype(parent);
-	if (devtype == NULL)
-		return parent;
-	if (strcmp(devtype, "usb_interface") != 0 && strcmp(devtype, "usb_device") != 0)
-		return parent;
-
-	str = udev_device_get_sysname(parent);
-	port = strchr(str, '-');
-	if (port == NULL)
-		return parent;
-	port++;
-
-	parent = skip_subsystem(parent, "usb");
-	path_prepend(path, "usb-0:%s", port);
-	return parent;
+	struct udev_device* dev = *parent;
+	
+	struct udev_device* hostdev = dev;
+	char const* hostname;
+	unsigned usbnum;
+	while (1) {
+		char const* subsys = udev_device_get_subsystem(hostdev);
+		if (NULL == subsys || 0 != strcmp(subsys, "usb")) {
+			return 0;
+		}
+		
+		hostname = udev_device_get_sysname(hostdev);
+		if (sscanf(hostname, "usb%u", &usbnum) == 1) {
+			break;
+		}
+		
+		hostdev = udev_device_get_parent(hostdev);
+	}
+	
+	char const* devname;
+	if (hostdev == dev) {
+		devname = "";
+	} else {
+		/* usbnum should match the child device */
+		size_t numlen = strlen(hostname + 3);
+		devname = udev_device_get_sysname(dev);
+		if (0 != strncmp(devname, hostname + 3, numlen) ||
+		'-' != devname[numlen]) {
+			return 0;
+		}
+		devname += numlen;
+	}
+	
+	int basenum;
+	if (!get_base(hostdev, "usb", 3, &basenum)) {
+		return 0;
+	}
+	usbnum -= basenum;
+	
+	path_prepend(path, "usb%u%s", usbnum, devname);
+	*parent = hostdev;
+	return 1;
 }
 
 static struct udev_device *handle_cciss(struct udev_device *parent, char **path)
@@ -401,6 +501,51 @@ out:
 	return parent;
 }
 
+static int handle_pci(struct udev_device** dev, char** path)
+{
+	if (!subsys_type_is(*dev, "pci", NULL)) {
+		return 0;
+	}
+	
+	char const* name = udev_device_get_sysname(*dev);
+	/* Assumming that name begins with xxxx:xx: (hex digits) */
+	path_prepend(path, "pci-%s", name + 8);
+	return 1;
+}
+
+/* Maps <stem>N => <stem>O */
+static int handle_net(struct udev_device** dev, char** path)
+{
+	if (!subsys_type_is(*dev, "net", NULL)) {
+		return 0;
+	}
+
+	char const* name = udev_device_get_sysname(*dev);
+	size_t len = strlen(name);
+
+	if (!isdigit(name[len - 1])) {
+		path_prepend(path, "net-%s", name);
+		return 1;
+	}
+
+	int n = 0;
+	int val = 1;
+	while (len > 0 && isdigit(name[len - 1])) {
+		--len;
+
+		n += (name[len] - '0') * val;
+		val *= 10;
+	}
+
+	int base;
+	if (!get_base(*dev, name, len, &base)) {
+		return 0;
+	}
+
+	path_prepend(path, "net-%.*s%d", len, name, n - base);
+	return 1;
+}
+
 int main(int argc, char **argv)
 {
 	static const struct option options[] = {
@@ -478,21 +623,17 @@ int main(int argc, char **argv)
 		subsys = udev_device_get_subsystem(parent);
 
 		if (subsys == NULL) {
-			;
+			path_prepend(&path, "%s", udev_device_get_sysname(parent));
 		} else if (strcmp(subsys, "scsi_tape") == 0) {
 			handle_scsi_tape(parent, &path_suffix);
-		} else if (strcmp(subsys, "scsi") == 0) {
-			parent = handle_scsi(parent, &path);
+		} else if (handle_scsi(&parent, &path)) {
 		} else if (strcmp(subsys, "cciss") == 0) {
 			handle_cciss(parent, &path);
-		} else if (strcmp(subsys, "usb") == 0) {
-			parent = handle_usb(parent, &path);
+		} else if (handle_usb(&parent, &path)) {
 		} else if (strcmp(subsys, "serio") == 0) {
 			path_prepend(&path, "serio-%s", udev_device_get_sysnum(parent));
 			parent = skip_subsystem(parent, "serio");
-		} else if (strcmp(subsys, "pci") == 0) {
-			path_prepend(&path, "pci-%s", udev_device_get_sysname(parent));
-			parent = skip_subsystem(parent, "pci");
+		} else if (handle_pci(&parent, &path)) {
 		} else if (strcmp(subsys, "platform") == 0) {
 			path_prepend(&path, "platform-%s", udev_device_get_sysname(parent));
 			parent = skip_subsystem(parent, "platform");
@@ -502,6 +643,16 @@ int main(int argc, char **argv)
 		} else if (strcmp(subsys, "virtio") == 0) {
 			path_prepend(&path, "virtio-pci-%s", udev_device_get_sysname(parent));
 			parent = skip_subsystem(parent, "virtio");
+		} else if (handle_net(&parent, &path)) {
+		} else {
+			char const* name = udev_device_get_sysname(parent);
+			char const* type = udev_device_get_devtype(parent);
+			if (NULL == type) {
+				path_prepend(&path, "%s-%s", subsys, name);
+			} else {
+				path_prepend(&path, "%s.%s-%s", subsys, type,
+					name);
+			}
 		}
 
 		parent = udev_device_get_parent(parent);
